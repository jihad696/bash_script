#!/bin/bash

# Script to create foreign key relationships between PostgreSQL tables

echo "====== PostgreSQL Foreign Key Relationship Manager ======"

# Get database name
read -p "Enter database name: " dbname

# Check if database exists
db_exists=$(sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='$dbname'")
if [[ -z "$db_exists" ]]; then
    echo "Error: Database '$dbname' does not exist."
    exit 1
fi

# Display available tables in the database
echo -e "\nAvailable tables in database '$dbname':"
sudo -u postgres psql -d "$dbname" -c "\dt"

# Get child table information (the table that will contain the foreign key)
read -p "Enter child table name (table that will have the foreign key): " child_table

# Verify child table exists
table_exists=$(sudo -u postgres psql -d "$dbname" -tAc "SELECT to_regclass('$child_table');")
if [[ -z "$table_exists" ]]; then
    echo "Error: Table '$child_table' does not exist in database '$dbname'."
    exit 1
fi

# Display columns in child table
echo -e "\nColumns in '$child_table':"
sudo -u postgres psql -d "$dbname" -c "\d $child_table"

# Get column in child table for foreign key
read -p "Enter column name in '$child_table' to use as foreign key: " child_column

# Verify column exists in child table
column_exists=$(sudo -u postgres psql -d "$dbname" -tAc "SELECT column_name FROM information_schema.columns WHERE table_name='$child_table' AND column_name='$child_column'")
if [[ -z "$column_exists" ]]; then
    echo "Error: Column '$child_column' does not exist in table '$child_table'."
    exit 1
fi

# Get parent table information (the table to reference)
read -p "Enter parent table name (referenced table): " parent_table

# Verify parent table exists
table_exists=$(sudo -u postgres psql -d "$dbname" -tAc "SELECT to_regclass('$parent_table');")
if [[ -z "$table_exists" ]]; then
    echo "Error: Table '$parent_table' does not exist in database '$dbname'."
    exit 1
fi

# Display columns in parent table
echo -e "\nColumns in '$parent_table':"
sudo -u postgres psql -d "$dbname" -c "\d $parent_table"

# Get column in parent table to reference (usually a primary key)
read -p "Enter column name in '$parent_table' to reference (usually primary key): " parent_column

# Verify column exists in parent table
column_exists=$(sudo -u postgres psql -d "$dbname" -tAc "SELECT column_name FROM information_schema.columns WHERE table_name='$parent_table' AND column_name='$parent_column'")
if [[ -z "$column_exists" ]]; then
    echo "Error: Column '$parent_column' does not exist in table '$parent_table'."
    exit 1
fi

# Generate constraint name
constraint_name="${child_table}_${child_column}_fkey"

# Ask about ON DELETE behavior
echo -e "\nChoose ON DELETE behavior:"
select delete_behavior in "NO ACTION" "CASCADE" "SET NULL" "SET DEFAULT" "RESTRICT"; do
    case $delete_behavior in
        "NO ACTION"|"CASCADE"|"SET NULL"|"SET DEFAULT"|"RESTRICT")
            break
            ;;
        *)
            echo "Invalid option. Please select a valid ON DELETE behavior."
            ;;
    esac
done

# Ask about ON UPDATE behavior
echo -e "\nChoose ON UPDATE behavior:"
select update_behavior in "NO ACTION" "CASCADE" "SET NULL" "SET DEFAULT" "RESTRICT"; do
    case $update_behavior in
        "NO ACTION"|"CASCADE"|"SET NULL"|"SET DEFAULT"|"RESTRICT")
            break
            ;;
        *)
            echo "Invalid option. Please select a valid ON UPDATE behavior."
            ;;
    esac
done

# Build and execute the SQL command to create the foreign key relationship
sql_command="ALTER TABLE $child_table ADD CONSTRAINT $constraint_name FOREIGN KEY ($child_column) REFERENCES $parent_table($parent_column)"

# Add ON DELETE and ON UPDATE clauses if selected
if [[ "$delete_behavior" != "NO ACTION" ]]; then
    sql_command="$sql_command ON DELETE $delete_behavior"
fi

if [[ "$update_behavior" != "NO ACTION" ]]; then
    sql_command="$sql_command ON UPDATE $update_behavior"
fi

sql_command="$sql_command;"

# Show the SQL command that will be executed
echo -e "\nExecuting the following SQL command:"
echo "$sql_command"

# Execute the command
result=$(sudo -u postgres psql -d "$dbname" -c "$sql_command" 2>&1)
exit_status=$?

if [[ $exit_status -ne 0 ]]; then
    echo -e "\n❌ Error creating foreign key relationship:"
    echo "$result"
    exit 1
else
    echo -e "\n✅ Foreign key relationship created successfully!"
    
    # Display the updated table structure
    echo -e "\nUpdated structure of '$child_table':"
    sudo -u postgres psql -d "$dbname" -c "\d $child_table"
fi

echo -e "\nForeign key relationship summary:"
echo "- Database: $dbname"
echo "- Child table: $child_table"
echo "- Child column: $child_column"
echo "- Parent table: $parent_table"
echo "- Parent column: $parent_column"
echo "- ON DELETE: $delete_behavior"
echo "- ON UPDATE: $update_behavior"

echo -e "\nOperation completed."
